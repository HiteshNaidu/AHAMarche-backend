service: AHAMarche
frameworkVersion: ">=1.1.0 <2.0.0"

package:
  individually: true
  exclude:
    - node_modules/**
    - services/**

provider:
  name: aws
  # stage: ${opt:stage, 'dev'}
  runtime: nodejs12.x
  versionFunctions: false
  deploymentBucket:
    name: ahamarche-serverless-deployments-sandbox
  role: arn:aws:iam::321072488546:role/sbx-ahamarche
  region: ca-central-1
  logRetentionInDays: 14
  environment:
    USERPOOL:
      "Fn::ImportValue": ${self:service}-dev-Userpool
    TABLE:
      "Fn::ImportValue": ${self:service}-dev-DynamoDB
  stackTags:
    environment: sandbox
    classification: internal
    cost_code: "3144"
    application_name: ${self:service}-dev
    business_owner: AHAMarche
    tech_owner: AHAMarche

functions:
  # Lambda triggers for Cognito Custom Passwordless Auth
  preSignUp:
    handler: services/auth/preSignUp.handler
    package:
      include:
        - services/auth/**
  defineAuthChallenge:
    handler: services/auth/defineAuthChallenge.handler
    package:
      include:
        - services/auth/**
  createAuthChallenge:
    memorySize: 512 # optional, in MB, default is 1024
    timeout: 30
    handler: services/auth/createAuthChallenge.handler
    package:
      include:
        - services/auth/**
  verifyAuthChallengeResponse:
    handler: services/auth/verifyAuthChallengeResponse.handler
    package:
      include:
        - services/auth/**

  # User APIs
  getUser:
    handler: services/user/get.get
    package:
      include:
        - services/user/**
    events:
      - http:
          path: user/{id}
          method: get
          cors: true

  getAllUsers:
    handler: services/user/getAllUsers.get
    package:
      include:
        - services/user/**
    events:
      - http:
          path: user
          method: get
          cors:
            origin: '*'
            headers:
              - '*'
              - Authorization
            allowCredentials: true

  postUser:
    handler: services/user/update.update
    package:
      include:
        - services/user/**
    events:
      - http:
          path: user/{id}
          method: put
          cors: true

  deleteUser:
    handler: services/user/delete.delete
    package:
      include:
        - services/user/**
    events:
      - http:
          path: user/{id}
          method: delete
          cors:
            origin: '*'
            headers:
              - '*'
              - Authorization
            allowCredentials: true

  deleteCognitoUser:
    handler: services/user/deleteCognitouser.handler
    package:
      include:
        - services/user/**
    events:
      - http:
          path: user/{id}
          method: post
          cors: true

  # Item APIs
  getItemsByCategory:
    handler: services/item/getItemsByCategory.get
    package:
      include:
        - services/item/**
    events:
      - http:
          path: item/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
            allowCredentials: true

  postItem:
    handler: services/item/postItem.handler
    package:
      include:
        - services/item/**
    events:
      - http:
          path: item/{id}
          method: post
          cors:
            origin: '*'
            headers:
              - '*'
              - Authorization
            allowCredentials: true

  updateItem:
    handler: services/item/updateItem.update
    package:
      include:
        - services/item/**
    events:
      - http:
          path: item/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - '*'
              - Authorization
            allowCredentials: true

  textToSeller:
    handler: services/sns/textToSeller.handler
    package:
      include:
        - services/sns/**
    events:
      - http:
          path: sns/seller/{id}
          method: post
          cors:
            origin: '*'
            headers:
              - '*'
              - Authorization
            allowCredentials: true

  textToDriver:
    handler: services/sns/textToDriver.handler
    package:
      include:
        - services/sns/**
    events:
      - http:
          path: sns/driver/{id}
          method: post
          cors:
            origin: '*'
            headers:
              - '*'
              - Authorization
            allowCredentials: true

  # getItemsByUser:
  #   handler: services/item/getItemsByUser.get
  #   package:
  #     include:
  #       - services/item/**
  #   events:
  #     - http:
  #         path: all/{id}
  #         method: get
  #         cors: true

resources:
  Resources:
    #  Create dynamo db single table for User, Items
    AHAMarcheUsers:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sort
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-dev
        GlobalSecondaryIndexes:
          - IndexName: itemIdx
            KeySchema:
              - AttributeName: sort
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # Creates a user pool in cognito for your app to auth against
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: !Sub ${self:service}-dev
        UsernameAttributes:
          - phone_number
        MfaConfiguration: "OFF"
        LambdaConfig:
          PreSignUp: !GetAtt [PreSignUpLambdaFunction, Arn]
          CreateAuthChallenge: !GetAtt [CreateAuthChallengeLambdaFunction, Arn]
          DefineAuthChallenge: !GetAtt [DefineAuthChallengeLambdaFunction, Arn]
          VerifyAuthChallengeResponse:
            !GetAtt [VerifyAuthChallengeResponseLambdaFunction, Arn]
        Schema:
          - Name: city
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: 256
              MinLength: 1
          - Name: firstname
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: 256
              MinLength: 1
          - Name: lastname
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: 256
              MinLength: 1
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_phone_number
              Priority: 1

    # Creates a User Pool Client to be used by the identity pool
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: !Sub ${self:service}AppClient
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        ExplicitAuthFlows:
          - CUSTOM_AUTH_FLOW_ONLY

    ApiGatewayAuthorizer:
      DependsOn:
      # this is pre-defined by serverless
      - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito_auth
        # apparently ApiGatewayRestApi is a global string
        RestApiId: { "Ref": "ApiGatewayRestApi" }
        IdentitySource: method.request.header.Authorization
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [UserPool, Arn]

    #To resolve first time Cognito login error
    PreSignUpLambdaInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt PreSignUpLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    DefineAuthLambdaInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt DefineAuthChallengeLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    CreateAuthLambdaInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt CreateAuthChallengeLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    VerifyAuthLambdaInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
      Export:
        Name: ${self:service}-dev-Userpool
    DynamoDB:
      Value: !Ref AHAMarcheUsers
      Export:
        Name: ${self:service}-dev-DynamoDB
